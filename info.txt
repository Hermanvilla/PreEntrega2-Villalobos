Links de interes : 


- tailwind : https://tailwindcss.com/docs
- tailwind en vite : https://tailwindcss.com/docs/guides/vite
- Auto completador de clases de Tailwind : https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss

- ant design : https://ant.design

- lucide-react (iconos) : https://lucide.dev




- Componentes Tailwind 1 : https://mambaui.com/components
- Componentes Tailwind 2 : https://tailblocks.cc/
- Componentes Tailwind 3 (para AI) : https://www.langui.dev/components
- Componentes Tailwind 4 : https://kitwind.io/products/kometa/components
- Componentes Tailwind 5 : https://merakiui.com/components

- Extension VsCode React 1 : https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets
- Extension VsCode React 2 : https://marketplace.visualstudio.com/items?itemName=rodrigovallades.es7-react-js-snippets
- Extension Tailwind (autocomplete) : https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss


- https://github.com/streamich/react-use


- Listado de APIs : https://github.com/public-apis/public-apis
https://rickandmortyapi.com/documentation
https://developer.marvel.com/docs



Estados : Son variables "reactivas", es decir que si se modifica su valor, react "reacciona" a este cambio y vuelve a dibujarlas en pantalla

Hook : Son funciones que nos permiten incorporar nuevas funcionalidades en un componente

useState : El hook useState nos permite manejar estados de estado en React. Cada vez que se ejectua nos da UNA variable de estado. El hook en si retorna SIEMPRE un array con dos cosas dentro. El primer elemento es el valor de la variable de estado, y el segundo es una función que nos permite cambiar el valor de la variable de estado.


useRef
useEffect
useContext



DESTRUCTURING : 

const arr = [1,2,3]

const uno = arr[0]
const dos = arr[1]
const tres = arr[2]

const [uno,dos,tres] = arr




const obj = { name:"Horacio", age : 34 }

const name = obj.name
const age = obj.age

const {name : name , age : age} = obj
const {name, age} = obj



OBJECT PROPERTY SHORTHAND :

const nombre = "horacio"

const persona = { nombre }





Promesas y Maps 


const nombres = ["horacio","juan","pedro"]


const unValor = nombres.forEach((item,i)=>{

})


nombres.map((item,i)=>{

})

/* const nombres = [
    {
        name : "Pedro",
        salary : 1000
    },
    {
        name : "Juan",
        salary : 2000
    },
    {
        name : "Maria",
        salary : 3000
    }
]


const unValor = nombres.forEach((item,i)=>{
    console.log(item,i)
})

const otroValor = nombres.map((item,i)=>{
    //console.log(item,i)
    return {
        name : item.name,
        salary : item.salary + 100
    }
})

console.log(unValor)
console.log(otroValor)
 */



const obj = {
    then : () => {},
    catch : () => {},
    finally : () => {}
}



const respuesta = caches.open() //=> Promise
const respuesta = fetch("/users") //=> Promise

caches.open()
.then()
.catch()
.finally()

fetch("/users")
.then()
.catch()
.finally()




hagan un Mock Async en un efecto a 2 segundos


const miPromesa = new Promise((res, rej) => { 
    console.log("Pidiendo...")
    setTimeout(()=>{
        res()
    },5000)
})

miPromesa.then(() => { console.log("Bien") })

miPromesa.catch(() => { console.log("Mal") })

miPromesa.finally(() => { console.log("Finalizo") })




API : Interfaz de programación de aplicaciones (API)




1) Containers y Presentacionales

Los containers : Son componentes que tienen un estado interno y una UI intermedia. Es decir que no tienen un DOM propio y manejan algun tipo de informacion conseguida y tienen logicas mas fueres, como metodos internos, eventos internos, condicionales de validaciones ,etc. Siempre un componente de este tipo va a pasar su informacion hacia un presentacional

Los presentacionales : Son componentes por lo general no suelen tener logica, es decir que podrian no tener estado interno, ni metodos, sino mas bien toda la informacion que necesitan viene de un componente padre (container). Estos componentes por lo general van a recibir props y los van a querer mostrar en pantalla. Estos componentes suelen trabajar el DOM. 

2) Hooks y patrones de diseño (HoC)
3) Destructuring , REST/SPREAD/ , Operador Ternario


MANUAL DE PROMESAS : 
1) Si tengo una promesa y NO ESTA dentro de un .then()
 entonces le pongo uno (.then) a coninuacion
2) Si tengo una promesa y ESTA dentro de un .then()
  entonces NO le pongo otro (.then) a coninuacion sino que la retorno y continuo abajo del ULTIOMO the. que aparezca




fetch(url string , config object)
.then((respuesta)=>{
    respuesta.json()
})
.catch((error)=>{})





fetch("miapi.com/users")
.then((respuesta)=>{
    return respuesta.json()
})
.then((usuarios)=>{
    const userId = usuarios[50].id
    return fetch("miapi.com/posts")
})
.then((respuesta)=>{
    return respuesta.json()
})
.then((posteos)=>{
    const postId = posteos[50].id
    return fetch("miapi.com/comments")
})
.then((respuesta)=>{
    return respuesta.json()
})
.then((comentarios)=>{
    
})
.catch(()=>{})








fetch("miapi.com",{
    method : "POST",
})
.then((respuesta)=>{
    respuesta.json()
})






function Counter(){
    const [count, setCount] = useState(0)

    const increment = () => setCount(count + 1)

    const decrement = () => setCount(count - 1)

    const reset = () => setCount(0)

    return (
        <div>
            ....
        </div>
    )
}



<section className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 users">
                <UserCardContainer/>
            </section> 